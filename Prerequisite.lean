/-! # 前提条件
Lean は定理証明支援系なので，話の中で必要になるすべての概念・定義をすべて実装する必要があります．完璧に形式的で，機械が読めるような証明を書かなければいけないことを考えると，仕方のないことです．

だからといって，「自然数の足し算は可換」とか「整数の掛け算と足し算は交換する」といったことをいちいち証明していると本題に入れなくなってしまうので，本書では適当にライブラリを引用することにします．

どこまでを仮定として認めるかですが，数学の教科書に書いてあるような書き方をすると

* 選択公理や排中律 [^logic]
* 整数には負の数，ゼロ，正の数がある
* 任意の2つの整数 $a, b$ は大小が比較できる．専門的な言い方をすると，整数には線形順序(全順序)が入っている．
* 整数には足し算，引き算，掛け算，べき乗が定義されている
* 足し算や掛け算は順序によらないし，括弧が不要．そして足し算と掛け算の間には分配法則が成り立つ．専門的な言い方をすると，整数は可換環をなす．

といったことについてはライブラリの使用を認めます．

それは Lean に置き換えると，`ℤ` が `LinearOrderedCommRing` という型クラスのインスタンスであることを認める，ということです．これは `Mathlib/Data/Int/Order/Basic.lean` で主張されているため，`import Mathlib.Data.Int.Order.Basic` を使用することは認めるということになります．なお，場合によりもっと狭い範囲に制限することもあります．
-/

/-!
[^logic]: 選択公理や排中律という言葉の意味が分からなくても大丈夫です．
-/
